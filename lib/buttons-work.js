// Generated by CoffeeScript 1.10.0
(function() {
  var Gpio, actions, buttonPressed, buttonTimeout, buttons, currentAction, debounce, debug, exitHandler, initializePins, lights, setButton;

  Gpio = require('onoff').Gpio;

  debug = false;

  actions = null;

  lights = {};

  buttons = {};

  buttonTimeout = null;

  currentAction = null;

  debounce = {};

  setButton = function(name, value) {
    if (lights[name]) {
      return lights[name].write(value);
    }
  };

  buttonPressed = function(name) {
    if (debug) {
      console.log(name + ' button pressed');
    }
    if (buttonTimeout) {
      clearTimeout(buttonTimeout);
    }
    if (debounce[name]) {
      return;
    }
    if (currentAction && currentAction[name]) {
      currentAction = currentAction[name];
    } else {
      currentAction = actions[name];
    }
    if (debug) {
      console.log(currentAction);
    }
    return buttonTimeout = setTimeout(function() {
      debounce[name] = true;
      currentAction["do"]();
      currentAction = null;
      return buttonTimeout = null;
    }, currentAction.delay || 0);
  };

  initializePins = function() {
    var buttonConfig, name, results;
    results = [];
    for (name in actions) {
      buttonConfig = actions[name];
      if (buttonConfig.pins) {
        if (buttonConfig.pins.light) {
          lights[name] = new Gpio(buttonConfig.pins.light, 'out');
        }
        buttons[name] = new Gpio(buttonConfig.pins.button, 'in', 'both');
        results.push(buttons[name].watch((function(name, err, value) {
          if (value && !buttonTimeout) {
            setButton(name, 1);
            return buttonPressed(name);
          } else if (!value) {
            debounce[name] = false;
            return setButton(name, 0);
          }
        }).bind(this, name)));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  module.exports = {
    init: function(buttonConfig, enableDebug) {
      if (enableDebug) {
        debug = true;
      }
      actions = buttonConfig;
      initializePins();
      return this;
    },
    simulateButtonPress: function(buttonName) {
      return buttonPressed(buttonName);
    }
  };

  process.stdin.resume();

  exitHandler = function(options, err) {
    var button, i, j, len, len1, light;
    console.log('closing pins');
    for (i = 0, len = lights.length; i < len; i++) {
      light = lights[i];
      light.unexport();
    }
    for (j = 0, len1 = buttons.length; j < len1; j++) {
      button = buttons[j];
      button.unexport();
    }
    return process.exit();
  };

  process.on('exit', exitHandler.bind(null, {
    cleanup: true
  }));

  process.on('SIGINT', exitHandler.bind(null, {
    exit: true
  }));

  process.on('uncaughtException', exitHandler.bind(null, {
    exit: true
  }));

}).call(this);
